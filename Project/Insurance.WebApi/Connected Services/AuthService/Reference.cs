//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Insurance.WebApi.AuthService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthService.IAuthService")]
    public interface IAuthService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/SignIn", ReplyAction="http://tempuri.org/IAuthService/SignInResponse")]
        bool SignIn(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/SignIn", ReplyAction="http://tempuri.org/IAuthService/SignInResponse")]
        System.Threading.Tasks.Task<bool> SignInAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/RegistrationAccount", ReplyAction="http://tempuri.org/IAuthService/RegistrationAccountResponse")]
        bool RegistrationAccount(string mail, string fullName, System.DateTime birthDate, System.DateTime driverLicenseDate, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/RegistrationAccount", ReplyAction="http://tempuri.org/IAuthService/RegistrationAccountResponse")]
        System.Threading.Tasks.Task<bool> RegistrationAccountAsync(string mail, string fullName, System.DateTime birthDate, System.DateTime driverLicenseDate, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/GetUser", ReplyAction="http://tempuri.org/IAuthService/GetUserResponse")]
        Insurance.BL.Models.User GetUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/GetUser", ReplyAction="http://tempuri.org/IAuthService/GetUserResponse")]
        System.Threading.Tasks.Task<Insurance.BL.Models.User> GetUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/ChangePassword", ReplyAction="http://tempuri.org/IAuthService/ChangePasswordResponse")]
        bool ChangePassword(string email, string oldPasswordHash, string newPasswordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/ChangePassword", ReplyAction="http://tempuri.org/IAuthService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string email, string oldPasswordHash, string newPasswordHash);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthServiceChannel : Insurance.WebApi.AuthService.IAuthService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthServiceClient : System.ServiceModel.ClientBase<Insurance.WebApi.AuthService.IAuthService>, Insurance.WebApi.AuthService.IAuthService {
        
        public AuthServiceClient() {
        }
        
        public AuthServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SignIn(string email, string password) {
            return base.Channel.SignIn(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> SignInAsync(string email, string password) {
            return base.Channel.SignInAsync(email, password);
        }
        
        public bool RegistrationAccount(string mail, string fullName, System.DateTime birthDate, System.DateTime driverLicenseDate, string password) {
            return base.Channel.RegistrationAccount(mail, fullName, birthDate, driverLicenseDate, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrationAccountAsync(string mail, string fullName, System.DateTime birthDate, System.DateTime driverLicenseDate, string password) {
            return base.Channel.RegistrationAccountAsync(mail, fullName, birthDate, driverLicenseDate, password);
        }
        
        public Insurance.BL.Models.User GetUser(string email) {
            return base.Channel.GetUser(email);
        }
        
        public System.Threading.Tasks.Task<Insurance.BL.Models.User> GetUserAsync(string email) {
            return base.Channel.GetUserAsync(email);
        }
        
        public bool ChangePassword(string email, string oldPasswordHash, string newPasswordHash) {
            return base.Channel.ChangePassword(email, oldPasswordHash, newPasswordHash);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string email, string oldPasswordHash, string newPasswordHash) {
            return base.Channel.ChangePasswordAsync(email, oldPasswordHash, newPasswordHash);
        }
    }
}
